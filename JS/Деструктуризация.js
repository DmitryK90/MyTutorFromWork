Деструктуризация (destructuring assignment) – это особый синтаксис присваивания, при котором можно
присвоить массив или объект сразу нескольким переменным, разбив его на части.
(https://learn.javascript.ru/destructuring)

Пример деструктуризации массива:
const numbers = [1, 2, 3, 4, 5];
const [first, second, ...tail] = numbers; // first, second - названия могут быть любыми.
//если всего два, то ...tail будет пустой массив.
const [first,, second] = numbers; // можно пропустить.
---
const numbers = [1, [2, 4], 3, 4, 5]; // с вложенными.
const [first, second, [deepFirst, deepSecond], ...tail] = numbers;

Оператор «spread»
Если мы хотим получить и последующие значения массива, но не уверены в их числе – можно добавить ещё
один параметр, который получит «всё остальное», при помощи оператора "..." («spread», троеточие):
let [firstName, lastName, ...rest] = "Юлий Цезарь Император Рима".split(" ");
alert(firstName); // Юлий
alert(lastName);  // Цезарь
alert(rest);      // Император,Рима (массив из 2х элементов)
Значением rest будет массив из оставшихся элементов массива. Вместо rest можно использовать и другое
имя переменной, оператор здесь – троеточие. Оно должно стоять только последним элементом в списке слева.

-----

Деструктуризация объекта
Деструктуризацию можно использовать и с объектами. При этом мы указываем, какие свойства в какие
переменные должны «идти».

Базовый синтаксис:
let {var1, var2} = {var1: …, var2: …};
Объект справа – уже существующий, который мы хотим разбить на переменные. А слева – список переменных,
в которые нужно соответствующие свойства записать.
Например:
let options = {
  title: "Меню",
  width: 100,
  height: 200
};
let {title, width, height} = options;
alert(title);  // Меню
alert(width);  // 100
alert(height); // 200
Как видно, свойства options.title, options.width и options.height автоматически присвоились
соответствующим переменным.
По сути:
const {title} = options; // это тоже, что и const title = options.title

Пример:
const myObj = {
    a: 1,
    b: 2,
    c: 3,
    d: 3
};
const {d} = myObj; // порядок не важен, пишем имя нужного ключа.
const {d: newD} = myObj; // переименовали d в newD.